/*
    test.me - MakeMe file for Appweb test
 */

Me.load({
    targets: {
        'prep-cgi': {
            build: `
                let path = me.dir.out.join('.cgi-prepared')
                if (!path.exists) {
                    Cmd.run('testme --clean')
                    rm(['cgi-bin/cgi*', 'cgi-bin/nph*', 'web/caching/cache.cgi', 'web/auth/basic/basic.cgi'])
                    path.write('')
                }
            `,
            generate: false,
        },
        'test-testScript': {
            path: 'cgi-bin/testScript',
            build: `
                let path = TARGET.path.relative
                path.write('#!' + me.dir.bin.join('cgiProgram${EXE}' + '\n'))
                path.setAttributes({permissions: 0755})
                trace('Create', path)
            `,
            depends: [ 'cgiProgram' ],
            generate: false,
            platforms: [ 'local' ],
            ifdef: [ 'cgi' ],
        },

        'test-cache.cgi': {
            path: 'web/caching/cache.cgi',
            build: `
                let path = TARGET.path.relative
                path.write('#!' + Cmd.locate('ejs') + '\n' + 
                    'print(\"HTTP/1.0 200 OK\nContent-Type: text/plain\n\n{number:\" + Date().now() + \"}\n\")')
                path.setAttributes({permissions: 0755})
                trace('Create', path)
            `,
            depends: [ 'cgiProgram' ],
            generate: false,
            platforms: [ 'local' ],
            ifdef: [ 'cgi' ],
        },

        'test-basic.cgi': {
            path: 'web/auth/basic/basic.cgi',
            build: `
                let path = TARGET.path.relative
                path.write('#!' + Cmd.locate('ejs') + '\n' + 
                    'print(\"HTTP/1.0 200 OK\nContent-Type: text/plain\n\n\" + serialize(App.env, {pretty: true}) + \"\n\")')
                path.setAttributes({permissions: 0755})
                trace('Create', path)
            `,
            depends: [ 'cgiProgram' ],
            generate: false,
            platforms: [ 'local' ],
            ifdef: [ 'cgi' ],
        },

        'test-cgiProgram': {
            path: 'cgi-bin/cgiProgram${EXE}',
            build: `
                let perms = { permissions: 0755 }
                let cgiProgram = me.dir.bin.join('cgiProgram${EXE}')
                cp(cgiProgram, Path('cgi-bin/cgiProgram${EXE}'), perms)
                cp(cgiProgram, Path('cgi-bin/nph-cgiProgram${EXE}'), perms)
                cp(cgiProgram, Path('cgi-bin/cgi Program${EXE}'), perms)
                cp(cgiProgram, Path('web/cgiProgram.cgi'), perms)
            `,
            depends: [ 'cgiProgram' ],
            generate: false,
            platforms: [ 'local' ],
            ifdef: [ 'cgi' ],
        },

        test: {
            action: `run('testme --depth ' + me.settings.depth)`,
            generate: false,
            platforms: [ 'local' ],
        },

        'auth.conf': {
            action: `
                let path = Path('auth.conf')
                trace('Generate', 'Authorization file: ' + path)
                path.write('#\n#   ' + path + ' - Authorization roles and users\n#\n\n')
                path.write('Role user view\nRole administrator view\nRole executive manage direct\n\n')
                run('authpass --cipher md5 --password pass4 ' + path + ' example.com julie user')
                run('authpass --cipher md5 --password pass3 ' + path + ' example.com peter user')
                run('authpass --cipher md5 --password pass2 ' + path + ' example.com mary user executive')
                run('authpass --cipher md5 --password pass1 ' + path + ' example.com joshua user administrator purchase')
                run('authpass --cipher blowfish --password pass5 ' + path + ' example.com ralph user administrator purchase')
            `,
        },

        testPackage: {
            type: 'test',
            action: `
                let package = packageName()
                if (!package || !package.exists) {
                    trace('Test', 'testPackage -- SKIPPED (Missing package to install)')
                } else if (me.settings.depth < 2) {
                    trace('Test', 'testPackage -- SKIPPED (Runs at depth 2 on windows or macosx)')
                } else {
                    if (Config.OS == 'macosx' && App.uid != 0) {
                        trace('Test', 'testPackage -- SKIPPED (Must run as root)')
                    } else {
                        trace('Test', 'testPackage')
                        if (me.prefixes.bin.join('uninstall').exists) {
                            trace('Test', 'Cleanup prior to installation')
                            uninstallPackage()
                            checkUninstalled()
                        }
                        installPackage()
                        if (missing = checkInstalled()) {
                            trace('Test', 'Install is missing files: ' + missing)
                        }
                        let s = me.settings
                        trace('Test', 'appweb -V')
                        assert(Cmd.run([me.prefixes.bin.join('appweb'), '-V']).trim() == s.version)
                        trace('Test', 'appweb running')
                        assert(Cmd.ps(/appweb/))
                        let http = new Http
                        trace('Test', 'GET /index.html')
                        App.sleep(3000)
                        http.get('/index.html')
                        assert(http.response.contains('Embedthis Appweb'))
                        uninstallPackage()
                        if (Config.OS == 'windows') App.sleep(1000)
                        if (existing = checkUninstalled()) {
                            trace('Warning', 'The uninstall for testPackage was not clean: ' + existing)
                        } else {
                            trace('Test', 'Uninstall is clean')
                        }
                    }
                }
            `,
        },

        'test-run': {
            enable: "!me.platform.cross",
            depends: [ 'compile' ],
            action: `
                trace('Run', 'From directory src/server')
                run('appweb -v')
            `,
        },

        'clean-test': {
            type: 'clean',                                                                                 
            action: `                                                                                      
                Cmd.run('testme --clean')
                rm('cache/*')
                rm('app/cache/*')
                rm('apps/*/cache/*')
                rm('junk/**')
                rm('web/js')
                Path('cache').makeDir()
                Path('cache/.keep').write()
                Path('app/cache').makeDir()
                Path('app/cache/.keep').write()
                Path('web/caching/cache.cgi').remove()
                Path('web/auth/basic/basic.cgi').remove()
            `
        }
    }
})
