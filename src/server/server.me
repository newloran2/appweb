/*
    server.me -- MakeMe file for appweb server
 */

Me.load({
    targets: {
        appweb: {
            type: 'exe',
            depends: [ 'libappweb', 'libslink' ],
            sources: [ 'appweb.c' ],
            postblend: function (target) {
                let sources = target.sources
                if (me.settings.rom) {
                    sources.push(target.home.join('romFiles.c'))
                }
                if (target.static) {
                    target.depends += ['libmod_esp', 'libmod_ssl', 'libmod_ejs', 'libmod_php', 'libmod_cgi']
                }
            },
        },

        /*
            Static library for esp applications. Always built but only contains code if static linking.
            The slink.c is generated via 'me genslink' to contain the static initializer calls for ESP apps. 
         */
        libslink: {
            type: 'lib',
            sources: [ 'slink.c' ],
            postblend: function (target) {
                if (Path('slink.c').exists) {
                    /* Dynamically compute the required sources for static linking */
                    let sources = me.targets.libslink.sources
                    for each (file in Path('slink.c').readString().match(/SOURCE [^ ]*/g)) {
                        sources.push(TARGET.home.join(file.replace(/SOURCE /mg, '')))
                    }
                }
                if (target.static) {
                    target.depends += ['esp', 'libmod_esp']
                }
            },
        },

        genslink: {
            run: `esp --static --genlink slink.c compile`,
            message: ['Create', 'slink.c'],
            generate: true,
            depends: [ 'esp' ],
            ifdef: [ 'esp' ],
        },

        appwebMonitor: {
            enable: "me.platform.like == 'windows'",
            type: 'exe',
            rule: 'gui',
            depends: [ 'libappweb' ],
            sources: [ 'windows/appwebMonitor.c' ],
            headers: [ 'windows/*.h' ],
            libraries: [ 'shell32.lib' ],
            resources: [ 'windows/appwebMonitor.rc' ],
        },

        'appwebMonitor.ico': {
            type: 'file',
            files: [ 'windows/appwebMonitor.ico' ],
            enable: "me.platform.like == 'windows'",
        },

        'server-cache': {
            path: 'cache',
            build: `makeDir('cache')`,
        },

        run: {
            depends: [ 'compile' ],
            action: `run('appweb -v')`,
            message: ['Run', 'From directory src/server'],
            'generate-sh': "sudo ${BIN}/appweb -v"
        },

        rom: {
            action: "
                let files = [ '.' ]
                files += Path('web').files('**')
                files += Path('junk/static').files('**')
                files += Path('junk/db').files('*.mdb')
                files.push('appweb.conf')
                files.push('mob.conf')
                files.push('auth.conf')
                files.push('esp.conf')
                Path('romFiles.c').write(Cmd.run(['makerom', '--prefix', '/'] + files))
            ",
        },
    },
})
